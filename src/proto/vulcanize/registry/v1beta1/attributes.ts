// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.1
 * source: vulcanize/registry/v1beta1/attributes.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace vulcanize.registry.v1beta1 {
    export class ServiceProviderRegistration extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            bond_id?: string;
            laconic_id?: string;
            x500?: X500;
            type?: string;
            version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("bond_id" in data && data.bond_id != undefined) {
                    this.bond_id = data.bond_id;
                }
                if ("laconic_id" in data && data.laconic_id != undefined) {
                    this.laconic_id = data.laconic_id;
                }
                if ("x500" in data && data.x500 != undefined) {
                    this.x500 = data.x500;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
            }
        }
        get bond_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set bond_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get laconic_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set laconic_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get x500() {
            return pb_1.Message.getWrapperField(this, X500, 3) as X500;
        }
        set x500(value: X500) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_x500() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            bond_id?: string;
            laconic_id?: string;
            x500?: ReturnType<typeof X500.prototype.toObject>;
            type?: string;
            version?: string;
        }): ServiceProviderRegistration {
            const message = new ServiceProviderRegistration({});
            if (data.bond_id != null) {
                message.bond_id = data.bond_id;
            }
            if (data.laconic_id != null) {
                message.laconic_id = data.laconic_id;
            }
            if (data.x500 != null) {
                message.x500 = X500.fromObject(data.x500);
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            return message;
        }
        toObject() {
            const data: {
                bond_id?: string;
                laconic_id?: string;
                x500?: ReturnType<typeof X500.prototype.toObject>;
                type?: string;
                version?: string;
            } = {};
            if (this.bond_id != null) {
                data.bond_id = this.bond_id;
            }
            if (this.laconic_id != null) {
                data.laconic_id = this.laconic_id;
            }
            if (this.x500 != null) {
                data.x500 = this.x500.toObject();
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.bond_id.length)
                writer.writeString(1, this.bond_id);
            if (this.laconic_id.length)
                writer.writeString(2, this.laconic_id);
            if (this.has_x500)
                writer.writeMessage(3, this.x500, () => this.x500.serialize(writer));
            if (this.type.length)
                writer.writeString(4, this.type);
            if (this.version.length)
                writer.writeString(6, this.version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServiceProviderRegistration {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServiceProviderRegistration();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.bond_id = reader.readString();
                        break;
                    case 2:
                        message.laconic_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.x500, () => message.x500 = X500.deserialize(reader));
                        break;
                    case 4:
                        message.type = reader.readString();
                        break;
                    case 6:
                        message.version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ServiceProviderRegistration {
            return ServiceProviderRegistration.deserialize(bytes);
        }
    }
    export class X500 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            common_name?: string;
            organization_unit?: string;
            organization_name?: string;
            locality_name?: string;
            state_name?: string;
            country?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("common_name" in data && data.common_name != undefined) {
                    this.common_name = data.common_name;
                }
                if ("organization_unit" in data && data.organization_unit != undefined) {
                    this.organization_unit = data.organization_unit;
                }
                if ("organization_name" in data && data.organization_name != undefined) {
                    this.organization_name = data.organization_name;
                }
                if ("locality_name" in data && data.locality_name != undefined) {
                    this.locality_name = data.locality_name;
                }
                if ("state_name" in data && data.state_name != undefined) {
                    this.state_name = data.state_name;
                }
                if ("country" in data && data.country != undefined) {
                    this.country = data.country;
                }
            }
        }
        get common_name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set common_name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get organization_unit() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set organization_unit(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get organization_name() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set organization_name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get locality_name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set locality_name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get state_name() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set state_name(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get country() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set country(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            common_name?: string;
            organization_unit?: string;
            organization_name?: string;
            locality_name?: string;
            state_name?: string;
            country?: string;
        }): X500 {
            const message = new X500({});
            if (data.common_name != null) {
                message.common_name = data.common_name;
            }
            if (data.organization_unit != null) {
                message.organization_unit = data.organization_unit;
            }
            if (data.organization_name != null) {
                message.organization_name = data.organization_name;
            }
            if (data.locality_name != null) {
                message.locality_name = data.locality_name;
            }
            if (data.state_name != null) {
                message.state_name = data.state_name;
            }
            if (data.country != null) {
                message.country = data.country;
            }
            return message;
        }
        toObject() {
            const data: {
                common_name?: string;
                organization_unit?: string;
                organization_name?: string;
                locality_name?: string;
                state_name?: string;
                country?: string;
            } = {};
            if (this.common_name != null) {
                data.common_name = this.common_name;
            }
            if (this.organization_unit != null) {
                data.organization_unit = this.organization_unit;
            }
            if (this.organization_name != null) {
                data.organization_name = this.organization_name;
            }
            if (this.locality_name != null) {
                data.locality_name = this.locality_name;
            }
            if (this.state_name != null) {
                data.state_name = this.state_name;
            }
            if (this.country != null) {
                data.country = this.country;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.common_name.length)
                writer.writeString(1, this.common_name);
            if (this.organization_unit.length)
                writer.writeString(2, this.organization_unit);
            if (this.organization_name.length)
                writer.writeString(3, this.organization_name);
            if (this.locality_name.length)
                writer.writeString(4, this.locality_name);
            if (this.state_name.length)
                writer.writeString(5, this.state_name);
            if (this.country.length)
                writer.writeString(6, this.country);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): X500 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new X500();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.common_name = reader.readString();
                        break;
                    case 2:
                        message.organization_unit = reader.readString();
                        break;
                    case 3:
                        message.organization_name = reader.readString();
                        break;
                    case 4:
                        message.locality_name = reader.readString();
                        break;
                    case 5:
                        message.state_name = reader.readString();
                        break;
                    case 6:
                        message.country = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): X500 {
            return X500.deserialize(bytes);
        }
    }
    export class WebsiteRegistrationRecord extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            url?: string;
            repo_registration_record_cid?: string;
            build_artifact_cid?: string;
            tls_cert_cid?: string;
            type?: string;
            version?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("repo_registration_record_cid" in data && data.repo_registration_record_cid != undefined) {
                    this.repo_registration_record_cid = data.repo_registration_record_cid;
                }
                if ("build_artifact_cid" in data && data.build_artifact_cid != undefined) {
                    this.build_artifact_cid = data.build_artifact_cid;
                }
                if ("tls_cert_cid" in data && data.tls_cert_cid != undefined) {
                    this.tls_cert_cid = data.tls_cert_cid;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
            }
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get repo_registration_record_cid() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set repo_registration_record_cid(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get build_artifact_cid() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set build_artifact_cid(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get tls_cert_cid() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set tls_cert_cid(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            url?: string;
            repo_registration_record_cid?: string;
            build_artifact_cid?: string;
            tls_cert_cid?: string;
            type?: string;
            version?: string;
        }): WebsiteRegistrationRecord {
            const message = new WebsiteRegistrationRecord({});
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.repo_registration_record_cid != null) {
                message.repo_registration_record_cid = data.repo_registration_record_cid;
            }
            if (data.build_artifact_cid != null) {
                message.build_artifact_cid = data.build_artifact_cid;
            }
            if (data.tls_cert_cid != null) {
                message.tls_cert_cid = data.tls_cert_cid;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            return message;
        }
        toObject() {
            const data: {
                url?: string;
                repo_registration_record_cid?: string;
                build_artifact_cid?: string;
                tls_cert_cid?: string;
                type?: string;
                version?: string;
            } = {};
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.repo_registration_record_cid != null) {
                data.repo_registration_record_cid = this.repo_registration_record_cid;
            }
            if (this.build_artifact_cid != null) {
                data.build_artifact_cid = this.build_artifact_cid;
            }
            if (this.tls_cert_cid != null) {
                data.tls_cert_cid = this.tls_cert_cid;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.url.length)
                writer.writeString(1, this.url);
            if (this.repo_registration_record_cid.length)
                writer.writeString(2, this.repo_registration_record_cid);
            if (this.build_artifact_cid.length)
                writer.writeString(3, this.build_artifact_cid);
            if (this.tls_cert_cid.length)
                writer.writeString(4, this.tls_cert_cid);
            if (this.type.length)
                writer.writeString(5, this.type);
            if (this.version.length)
                writer.writeString(6, this.version);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WebsiteRegistrationRecord {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WebsiteRegistrationRecord();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.url = reader.readString();
                        break;
                    case 2:
                        message.repo_registration_record_cid = reader.readString();
                        break;
                    case 3:
                        message.build_artifact_cid = reader.readString();
                        break;
                    case 4:
                        message.tls_cert_cid = reader.readString();
                        break;
                    case 5:
                        message.type = reader.readString();
                        break;
                    case 6:
                        message.version = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): WebsiteRegistrationRecord {
            return WebsiteRegistrationRecord.deserialize(bytes);
        }
    }
    export class ApplicationRecord extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            name?: string;
            description?: string;
            version?: string;
            homepage?: string;
            license?: string;
            author?: string;
            repository?: string;
            repository_ref?: string;
            app_version?: string;
            app_type?: string;
            engines?: string;
            os?: string[];
            cpu?: string[];
            meta?: string;
            tags?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13, 14, 21], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("homepage" in data && data.homepage != undefined) {
                    this.homepage = data.homepage;
                }
                if ("license" in data && data.license != undefined) {
                    this.license = data.license;
                }
                if ("author" in data && data.author != undefined) {
                    this.author = data.author;
                }
                if ("repository" in data && data.repository != undefined) {
                    this.repository = data.repository;
                }
                if ("repository_ref" in data && data.repository_ref != undefined) {
                    this.repository_ref = data.repository_ref;
                }
                if ("app_version" in data && data.app_version != undefined) {
                    this.app_version = data.app_version;
                }
                if ("app_type" in data && data.app_type != undefined) {
                    this.app_type = data.app_type;
                }
                if ("engines" in data && data.engines != undefined) {
                    this.engines = data.engines;
                }
                if ("os" in data && data.os != undefined) {
                    this.os = data.os;
                }
                if ("cpu" in data && data.cpu != undefined) {
                    this.cpu = data.cpu;
                }
                if ("meta" in data && data.meta != undefined) {
                    this.meta = data.meta;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get homepage() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set homepage(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get license() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set license(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get author() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set author(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get repository() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set repository(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get repository_ref() {
            return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
        }
        set repository_ref(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get app_version() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set app_version(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get app_type() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set app_type(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        get engines() {
            return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
        }
        set engines(value: string) {
            pb_1.Message.setField(this, 12, value);
        }
        get os() {
            return pb_1.Message.getFieldWithDefault(this, 13, []) as string[];
        }
        set os(value: string[]) {
            pb_1.Message.setField(this, 13, value);
        }
        get cpu() {
            return pb_1.Message.getFieldWithDefault(this, 14, []) as string[];
        }
        set cpu(value: string[]) {
            pb_1.Message.setField(this, 14, value);
        }
        get meta() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set meta(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 21, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 21, value);
        }
        static fromObject(data: {
            type?: string;
            name?: string;
            description?: string;
            version?: string;
            homepage?: string;
            license?: string;
            author?: string;
            repository?: string;
            repository_ref?: string;
            app_version?: string;
            app_type?: string;
            engines?: string;
            os?: string[];
            cpu?: string[];
            meta?: string;
            tags?: string[];
        }): ApplicationRecord {
            const message = new ApplicationRecord({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.homepage != null) {
                message.homepage = data.homepage;
            }
            if (data.license != null) {
                message.license = data.license;
            }
            if (data.author != null) {
                message.author = data.author;
            }
            if (data.repository != null) {
                message.repository = data.repository;
            }
            if (data.repository_ref != null) {
                message.repository_ref = data.repository_ref;
            }
            if (data.app_version != null) {
                message.app_version = data.app_version;
            }
            if (data.app_type != null) {
                message.app_type = data.app_type;
            }
            if (data.engines != null) {
                message.engines = data.engines;
            }
            if (data.os != null) {
                message.os = data.os;
            }
            if (data.cpu != null) {
                message.cpu = data.cpu;
            }
            if (data.meta != null) {
                message.meta = data.meta;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                name?: string;
                description?: string;
                version?: string;
                homepage?: string;
                license?: string;
                author?: string;
                repository?: string;
                repository_ref?: string;
                app_version?: string;
                app_type?: string;
                engines?: string;
                os?: string[];
                cpu?: string[];
                meta?: string;
                tags?: string[];
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.homepage != null) {
                data.homepage = this.homepage;
            }
            if (this.license != null) {
                data.license = this.license;
            }
            if (this.author != null) {
                data.author = this.author;
            }
            if (this.repository != null) {
                data.repository = this.repository;
            }
            if (this.repository_ref != null) {
                data.repository_ref = this.repository_ref;
            }
            if (this.app_version != null) {
                data.app_version = this.app_version;
            }
            if (this.app_type != null) {
                data.app_type = this.app_type;
            }
            if (this.engines != null) {
                data.engines = this.engines;
            }
            if (this.os != null) {
                data.os = this.os;
            }
            if (this.cpu != null) {
                data.cpu = this.cpu;
            }
            if (this.meta != null) {
                data.meta = this.meta;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.version.length)
                writer.writeString(4, this.version);
            if (this.homepage.length)
                writer.writeString(5, this.homepage);
            if (this.license.length)
                writer.writeString(6, this.license);
            if (this.author.length)
                writer.writeString(7, this.author);
            if (this.repository.length)
                writer.writeString(8, this.repository);
            if (this.repository_ref.length)
                writer.writeString(9, this.repository_ref);
            if (this.app_version.length)
                writer.writeString(10, this.app_version);
            if (this.app_type.length)
                writer.writeString(11, this.app_type);
            if (this.engines.length)
                writer.writeString(12, this.engines);
            if (this.os.length)
                writer.writeRepeatedString(13, this.os);
            if (this.cpu.length)
                writer.writeRepeatedString(14, this.cpu);
            if (this.meta.length)
                writer.writeString(20, this.meta);
            if (this.tags.length)
                writer.writeRepeatedString(21, this.tags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApplicationRecord {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApplicationRecord();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.version = reader.readString();
                        break;
                    case 5:
                        message.homepage = reader.readString();
                        break;
                    case 6:
                        message.license = reader.readString();
                        break;
                    case 7:
                        message.author = reader.readString();
                        break;
                    case 8:
                        message.repository = reader.readString();
                        break;
                    case 9:
                        message.repository_ref = reader.readString();
                        break;
                    case 10:
                        message.app_version = reader.readString();
                        break;
                    case 11:
                        message.app_type = reader.readString();
                        break;
                    case 12:
                        message.engines = reader.readString();
                        break;
                    case 13:
                        pb_1.Message.addToRepeatedField(message, 13, reader.readString());
                        break;
                    case 14:
                        pb_1.Message.addToRepeatedField(message, 14, reader.readString());
                        break;
                    case 20:
                        message.meta = reader.readString();
                        break;
                    case 21:
                        pb_1.Message.addToRepeatedField(message, 21, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApplicationRecord {
            return ApplicationRecord.deserialize(bytes);
        }
    }
    export class DnsRecord extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            name?: string;
            version?: string;
            resource_type?: string;
            value?: string;
            meta?: string;
            tags?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [21], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("resource_type" in data && data.resource_type != undefined) {
                    this.resource_type = data.resource_type;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("meta" in data && data.meta != undefined) {
                    this.meta = data.meta;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get resource_type() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set resource_type(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get meta() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set meta(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 21, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 21, value);
        }
        static fromObject(data: {
            type?: string;
            name?: string;
            version?: string;
            resource_type?: string;
            value?: string;
            meta?: string;
            tags?: string[];
        }): DnsRecord {
            const message = new DnsRecord({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.resource_type != null) {
                message.resource_type = data.resource_type;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.meta != null) {
                message.meta = data.meta;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                name?: string;
                version?: string;
                resource_type?: string;
                value?: string;
                meta?: string;
                tags?: string[];
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.resource_type != null) {
                data.resource_type = this.resource_type;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.meta != null) {
                data.meta = this.meta;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.version.length)
                writer.writeString(3, this.version);
            if (this.resource_type.length)
                writer.writeString(4, this.resource_type);
            if (this.value.length)
                writer.writeString(5, this.value);
            if (this.meta.length)
                writer.writeString(20, this.meta);
            if (this.tags.length)
                writer.writeRepeatedString(21, this.tags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DnsRecord {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DnsRecord();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.version = reader.readString();
                        break;
                    case 4:
                        message.resource_type = reader.readString();
                        break;
                    case 5:
                        message.value = reader.readString();
                        break;
                    case 20:
                        message.meta = reader.readString();
                        break;
                    case 21:
                        pb_1.Message.addToRepeatedField(message, 21, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DnsRecord {
            return DnsRecord.deserialize(bytes);
        }
    }
    export class ApplicationDeploymentRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            name?: string;
            version?: string;
            application?: string;
            dns?: string;
            config?: string;
            deployment?: string;
            meta?: string;
            tags?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [21], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("application" in data && data.application != undefined) {
                    this.application = data.application;
                }
                if ("dns" in data && data.dns != undefined) {
                    this.dns = data.dns;
                }
                if ("config" in data && data.config != undefined) {
                    this.config = data.config;
                }
                if ("deployment" in data && data.deployment != undefined) {
                    this.deployment = data.deployment;
                }
                if ("meta" in data && data.meta != undefined) {
                    this.meta = data.meta;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get application() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set application(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get dns() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set dns(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get config() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set config(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get deployment() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set deployment(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get meta() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set meta(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 21, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 21, value);
        }
        static fromObject(data: {
            type?: string;
            name?: string;
            version?: string;
            application?: string;
            dns?: string;
            config?: string;
            deployment?: string;
            meta?: string;
            tags?: string[];
        }): ApplicationDeploymentRequest {
            const message = new ApplicationDeploymentRequest({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.application != null) {
                message.application = data.application;
            }
            if (data.dns != null) {
                message.dns = data.dns;
            }
            if (data.config != null) {
                message.config = data.config;
            }
            if (data.deployment != null) {
                message.deployment = data.deployment;
            }
            if (data.meta != null) {
                message.meta = data.meta;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                name?: string;
                version?: string;
                application?: string;
                dns?: string;
                config?: string;
                deployment?: string;
                meta?: string;
                tags?: string[];
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.application != null) {
                data.application = this.application;
            }
            if (this.dns != null) {
                data.dns = this.dns;
            }
            if (this.config != null) {
                data.config = this.config;
            }
            if (this.deployment != null) {
                data.deployment = this.deployment;
            }
            if (this.meta != null) {
                data.meta = this.meta;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.version.length)
                writer.writeString(3, this.version);
            if (this.application.length)
                writer.writeString(4, this.application);
            if (this.dns.length)
                writer.writeString(5, this.dns);
            if (this.config.length)
                writer.writeString(6, this.config);
            if (this.deployment.length)
                writer.writeString(7, this.deployment);
            if (this.meta.length)
                writer.writeString(20, this.meta);
            if (this.tags.length)
                writer.writeRepeatedString(21, this.tags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApplicationDeploymentRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApplicationDeploymentRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.version = reader.readString();
                        break;
                    case 4:
                        message.application = reader.readString();
                        break;
                    case 5:
                        message.dns = reader.readString();
                        break;
                    case 6:
                        message.config = reader.readString();
                        break;
                    case 7:
                        message.deployment = reader.readString();
                        break;
                    case 20:
                        message.meta = reader.readString();
                        break;
                    case 21:
                        pb_1.Message.addToRepeatedField(message, 21, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApplicationDeploymentRequest {
            return ApplicationDeploymentRequest.deserialize(bytes);
        }
    }
    export class ApplicationDeploymentRecord extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            name?: string;
            description?: string;
            version?: string;
            application?: string;
            url?: string;
            dns?: string;
            request?: string;
            meta?: string;
            tags?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [21], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("application" in data && data.application != undefined) {
                    this.application = data.application;
                }
                if ("url" in data && data.url != undefined) {
                    this.url = data.url;
                }
                if ("dns" in data && data.dns != undefined) {
                    this.dns = data.dns;
                }
                if ("request" in data && data.request != undefined) {
                    this.request = data.request;
                }
                if ("meta" in data && data.meta != undefined) {
                    this.meta = data.meta;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get application() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set application(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get url() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set url(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get dns() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set dns(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get request() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set request(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get meta() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set meta(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 21, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 21, value);
        }
        static fromObject(data: {
            type?: string;
            name?: string;
            description?: string;
            version?: string;
            application?: string;
            url?: string;
            dns?: string;
            request?: string;
            meta?: string;
            tags?: string[];
        }): ApplicationDeploymentRecord {
            const message = new ApplicationDeploymentRecord({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.application != null) {
                message.application = data.application;
            }
            if (data.url != null) {
                message.url = data.url;
            }
            if (data.dns != null) {
                message.dns = data.dns;
            }
            if (data.request != null) {
                message.request = data.request;
            }
            if (data.meta != null) {
                message.meta = data.meta;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                name?: string;
                description?: string;
                version?: string;
                application?: string;
                url?: string;
                dns?: string;
                request?: string;
                meta?: string;
                tags?: string[];
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.application != null) {
                data.application = this.application;
            }
            if (this.url != null) {
                data.url = this.url;
            }
            if (this.dns != null) {
                data.dns = this.dns;
            }
            if (this.request != null) {
                data.request = this.request;
            }
            if (this.meta != null) {
                data.meta = this.meta;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.version.length)
                writer.writeString(4, this.version);
            if (this.application.length)
                writer.writeString(5, this.application);
            if (this.url.length)
                writer.writeString(6, this.url);
            if (this.dns.length)
                writer.writeString(7, this.dns);
            if (this.request.length)
                writer.writeString(8, this.request);
            if (this.meta.length)
                writer.writeString(20, this.meta);
            if (this.tags.length)
                writer.writeRepeatedString(21, this.tags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ApplicationDeploymentRecord {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ApplicationDeploymentRecord();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.version = reader.readString();
                        break;
                    case 5:
                        message.application = reader.readString();
                        break;
                    case 6:
                        message.url = reader.readString();
                        break;
                    case 7:
                        message.dns = reader.readString();
                        break;
                    case 8:
                        message.request = reader.readString();
                        break;
                    case 20:
                        message.meta = reader.readString();
                        break;
                    case 21:
                        pb_1.Message.addToRepeatedField(message, 21, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ApplicationDeploymentRecord {
            return ApplicationDeploymentRecord.deserialize(bytes);
        }
    }
    export class GeneralRecord extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            type?: string;
            name?: string;
            description?: string;
            version?: string;
            category?: string;
            value?: string;
            meta?: string;
            tags?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [21], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("version" in data && data.version != undefined) {
                    this.version = data.version;
                }
                if ("category" in data && data.category != undefined) {
                    this.category = data.category;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("meta" in data && data.meta != undefined) {
                    this.meta = data.meta;
                }
                if ("tags" in data && data.tags != undefined) {
                    this.tags = data.tags;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get version() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set version(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get category() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set category(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set value(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get meta() {
            return pb_1.Message.getFieldWithDefault(this, 20, "") as string;
        }
        set meta(value: string) {
            pb_1.Message.setField(this, 20, value);
        }
        get tags() {
            return pb_1.Message.getFieldWithDefault(this, 21, []) as string[];
        }
        set tags(value: string[]) {
            pb_1.Message.setField(this, 21, value);
        }
        static fromObject(data: {
            type?: string;
            name?: string;
            description?: string;
            version?: string;
            category?: string;
            value?: string;
            meta?: string;
            tags?: string[];
        }): GeneralRecord {
            const message = new GeneralRecord({});
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.version != null) {
                message.version = data.version;
            }
            if (data.category != null) {
                message.category = data.category;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.meta != null) {
                message.meta = data.meta;
            }
            if (data.tags != null) {
                message.tags = data.tags;
            }
            return message;
        }
        toObject() {
            const data: {
                type?: string;
                name?: string;
                description?: string;
                version?: string;
                category?: string;
                value?: string;
                meta?: string;
                tags?: string[];
            } = {};
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.version != null) {
                data.version = this.version;
            }
            if (this.category != null) {
                data.category = this.category;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.meta != null) {
                data.meta = this.meta;
            }
            if (this.tags != null) {
                data.tags = this.tags;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type.length)
                writer.writeString(1, this.type);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.description.length)
                writer.writeString(3, this.description);
            if (this.version.length)
                writer.writeString(4, this.version);
            if (this.category.length)
                writer.writeString(5, this.category);
            if (this.value.length)
                writer.writeString(6, this.value);
            if (this.meta.length)
                writer.writeString(20, this.meta);
            if (this.tags.length)
                writer.writeRepeatedString(21, this.tags);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GeneralRecord {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GeneralRecord();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.type = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.description = reader.readString();
                        break;
                    case 4:
                        message.version = reader.readString();
                        break;
                    case 5:
                        message.category = reader.readString();
                        break;
                    case 6:
                        message.value = reader.readString();
                        break;
                    case 20:
                        message.meta = reader.readString();
                        break;
                    case 21:
                        pb_1.Message.addToRepeatedField(message, 21, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GeneralRecord {
            return GeneralRecord.deserialize(bytes);
        }
    }
}
